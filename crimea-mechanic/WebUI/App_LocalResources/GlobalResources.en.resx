<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutCarService" xml:space="preserve">
    <value>About car service</value>
  </data>
  <data name="AddressCarService" xml:space="preserve">
    <value>Address car service</value>
  </data>
  <data name="BestServices" xml:space="preserve">
    <value>Best car services</value>
  </data>
  <data name="CarService" xml:space="preserve">
    <value>Car service</value>
  </data>
  <data name="CarServiceLogo" xml:space="preserve">
    <value>Car service logo</value>
  </data>
  <data name="CarServiceName" xml:space="preserve">
    <value>Car service name</value>
  </data>
  <data name="CarServicePhotos" xml:space="preserve">
    <value>Car service photos</value>
  </data>
  <data name="CarServiceRegistration" xml:space="preserve">
    <value>Car service registration</value>
  </data>
  <data name="CarServiceSite" xml:space="preserve">
    <value>Car service site</value>
  </data>
  <data name="CarServiceWorkTime" xml:space="preserve">
    <value>Car service work hours</value>
  </data>
  <data name="ChooseCity" xml:space="preserve">
    <value>Choose city</value>
  </data>
  <data name="City" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="ClearForm" xml:space="preserve">
    <value>Clear form</value>
  </data>
  <data name="Client" xml:space="preserve">
    <value>Client</value>
  </data>
  <data name="ClientRegistration" xml:space="preserve">
    <value>Client registration</value>
  </data>
  <data name="ContactEmailCarService" xml:space="preserve">
    <value>Contact e-mail car service</value>
  </data>
  <data name="ContactInformation" xml:space="preserve">
    <value>Contact information</value>
  </data>
  <data name="ContactPhoneNumber" xml:space="preserve">
    <value>Contact phone number</value>
  </data>
  <data name="ContactPhoneNumbers" xml:space="preserve">
    <value>Contact phone numbers</value>
  </data>
  <data name="EnterName" xml:space="preserve">
    <value>Enter your name</value>
  </data>
  <data name="EnterPassword" xml:space="preserve">
    <value>Enter password</value>
  </data>
  <data name="FooterText" xml:space="preserve">
    <value>Ilya Mzhachev &amp; Fedor Kostyuchenko</value>
  </data>
  <data name="Hello" xml:space="preserve">
    <value>Hello</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Home page</value>
  </data>
  <data name="HomeHowItsWork" xml:space="preserve">
    <value>How it`s work</value>
  </data>
  <data name="HomeIntroducing" xml:space="preserve">
    <value>We are introducing a platform for interaction of car owners with car services - Crimean Mechanic</value>
  </data>
  <data name="HomeStep1" xml:space="preserve">
    <value>You are sending a request for repair</value>
  </data>
  <data name="HomeStep2" xml:space="preserve">
    <value>Application is in the system</value>
  </data>
  <data name="HomeStep3" xml:space="preserve">
    <value>Car services sends offers to you</value>
  </data>
  <data name="HomeStep4" xml:space="preserve">
    <value>You choose the best one and accept it</value>
  </data>
  <data name="HomeStep5" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="Location" xml:space="preserve">
    <value>Location</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="LogOut" xml:space="preserve">
    <value>Log out</value>
  </data>
  <data name="ManagerName" xml:space="preserve">
    <value>Manager name</value>
  </data>
  <data name="Menu" xml:space="preserve">
    <value>Menu</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PhoneNumber" xml:space="preserve">
    <value>Phone number</value>
  </data>
  <data name="Photos" xml:space="preserve">
    <value>Photos</value>
  </data>
  <data name="Regisration" xml:space="preserve">
    <value>Regisration</value>
  </data>
  <data name="RegisterNow" xml:space="preserve">
    <value>Register now</value>
  </data>
  <data name="RememberMe" xml:space="preserve">
    <value>Remember me</value>
  </data>
  <data name="RepeatPassword" xml:space="preserve">
    <value>Repeat password</value>
  </data>
  <data name="UserLogin" xml:space="preserve">
    <value>User login</value>
  </data>
  <data name="View" xml:space="preserve">
    <value>View</value>
  </data>
  <data name="ContactNameIsEmpty" xml:space="preserve">
    <value>You must fill the contact name</value>
  </data>
  <data name="LoginIsEmpty" xml:space="preserve">
    <value>You must fill the user`s login</value>
  </data>
  <data name="LoginIsNotEmail" xml:space="preserve">
    <value>Login must be e-mail address</value>
  </data>
  <data name="PasswordIsEmpty" xml:space="preserve">
    <value>You must fill the password</value>
  </data>
  <data name="PhoneNumberIsEmpty" xml:space="preserve">
    <value>You must fill the phone number</value>
  </data>
  <data name="RequiredFields" xml:space="preserve">
    <value>Fields marked with * are required</value>
  </data>
  <data name="SampleName" xml:space="preserve">
    <value>John Cena</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="SuccessUserRegistration" xml:space="preserve">
    <value>User successfully registered</value>
  </data>
  <data name="CarServiceAddressEmpty" xml:space="preserve">
    <value>You must fill the address of car service</value>
  </data>
  <data name="CarServiceEmailIsEmpty" xml:space="preserve">
    <value>You must fill the email of car service</value>
  </data>
  <data name="CarServiceNameIsEmpty" xml:space="preserve">
    <value>You must fill the car service name</value>
  </data>
  <data name="CarServicePhonesIsEmpty" xml:space="preserve">
    <value>You must fill car service phone numbers</value>
  </data>
  <data name="CityIsNotSelected" xml:space="preserve">
    <value>Choose the car service city</value>
  </data>
  <data name="ManagerNameIsEmpty" xml:space="preserve">
    <value>You must fill car service manager name</value>
  </data>
  <data name="SampleAddress" xml:space="preserve">
    <value>Grove street 12</value>
  </data>
  <data name="SuccessCarServiceRegistration" xml:space="preserve">
    <value>Application for car service registration successfully submitted</value>
  </data>
  <data name="Applications" xml:space="preserve">
    <value>Applications</value>
  </data>
  <data name="AppsForRegister" xml:space="preserve">
    <value>Register applications</value>
  </data>
  <data name="AutoserviceCard" xml:space="preserve">
    <value>Autoservice card</value>
  </data>
  <data name="ServiceRegister" xml:space="preserve">
    <value>Registration card</value>
  </data>
  <data name="Accept" xml:space="preserve">
    <value>Accept</value>
  </data>
  <data name="AcceptedMarksList" xml:space="preserve">
    <value>Accepted marks</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Decline" xml:space="preserve">
    <value>Decline</value>
  </data>
  <data name="NoRecordsFound" xml:space="preserve">
    <value>No records found</value>
  </data>
  <data name="RegApplicationCard" xml:space="preserve">
    <value>Application for registration card</value>
  </data>
  <data name="RegistrationDate" xml:space="preserve">
    <value>Registration date</value>
  </data>
  <data name="Reviews" xml:space="preserve">
    <value>Reviews</value>
  </data>
  <data name="ServiceInformationEdit" xml:space="preserve">
    <value>Service information editing</value>
  </data>
  <data name="WorkTags" xml:space="preserve">
    <value>Work tags</value>
  </data>
</root>